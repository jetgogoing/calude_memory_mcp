version: '3.8'

services:
  # Claude记忆管理MCP主服务
  claude-memory:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: claude-memory-mcp
    ports:
      - "8000:8000"
      - "9090:9090"  # Prometheus metrics
    environment:
      - DATABASE_URL=postgresql://claude_memory:password@postgres:5432/claude_memory_db
      - QDRANT_URL=http://qdrant:6333
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ~/.claude:/root/.claude:ro  # Claude CLI配置只读挂载
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_started
      redis:
        condition: service_started
    restart: unless-stopped
    networks:
      - claude-memory-network

  # PostgreSQL数据库
  postgres:
    image: postgres:16-alpine
    container_name: claude-memory-postgres
    environment:
      POSTGRES_DB: claude_memory_db
      POSTGRES_USER: claude_memory
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U claude_memory -d claude_memory_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - claude-memory-network

  # Qdrant向量数据库
  qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: claude-memory-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
      - ./docker/qdrant/config.yaml:/qdrant/config/production.yaml
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__LOG_LEVEL=INFO
    restart: unless-stopped
    networks:
      - claude-memory-network

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: claude-memory-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    restart: unless-stopped
    networks:
      - claude-memory-network

  # Prometheus监控
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: claude-memory-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - claude-memory-network

  # Grafana仪表板
  grafana:
    image: grafana/grafana:10.2.2
    container_name: claude-memory-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
    restart: unless-stopped
    networks:
      - claude-memory-network

  # Nginx反向代理(可选)
  nginx:
    image: nginx:1.25-alpine
    container_name: claude-memory-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - claude-memory
    restart: unless-stopped
    networks:
      - claude-memory-network

volumes:
  postgres_data:
    driver: local
  qdrant_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  claude-memory-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16